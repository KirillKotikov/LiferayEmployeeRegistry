package ru.kotikov.registry.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.kotikov.registry.model.Position;
import ru.kotikov.registry.model.PositionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Position service. Represents a row in the &quot;registry_Position&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.kotikov.registry.model.PositionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PositionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PositionImpl
 * @see ru.kotikov.registry.model.Position
 * @see ru.kotikov.registry.model.PositionModel
 * @generated
 */
public class PositionModelImpl extends BaseModelImpl<Position>
    implements PositionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a position model instance should use the {@link ru.kotikov.registry.model.Position} interface instead.
     */
    public static final String TABLE_NAME = "registry_Position";
    public static final Object[][] TABLE_COLUMNS = {
            { "positionId", Types.BIGINT },
            { "positionName", Types.VARCHAR },
            { "archiveStatus", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table registry_Position (positionId LONG not null primary key,positionName VARCHAR(75) null,archiveStatus BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table registry_Position";
    public static final String ORDER_BY_JPQL = " ORDER BY position.positionName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY registry_Position.positionName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.kotikov.registry.model.Position"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.kotikov.registry.model.Position"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.kotikov.registry.model.Position"),
            true);
    public static long ARCHIVESTATUS_COLUMN_BITMASK = 1L;
    public static long POSITIONNAME_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.kotikov.registry.model.Position"));
    private static ClassLoader _classLoader = Position.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Position.class
        };
    private long _positionId;
    private String _positionName;
    private boolean _archiveStatus;
    private boolean _originalArchiveStatus;
    private boolean _setOriginalArchiveStatus;
    private long _columnBitmask;
    private Position _escapedModel;

    public PositionModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _positionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPositionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _positionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Position.class;
    }

    @Override
    public String getModelClassName() {
        return Position.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("positionId", getPositionId());
        attributes.put("positionName", getPositionName());
        attributes.put("archiveStatus", getArchiveStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long positionId = (Long) attributes.get("positionId");

        if (positionId != null) {
            setPositionId(positionId);
        }

        String positionName = (String) attributes.get("positionName");

        if (positionName != null) {
            setPositionName(positionName);
        }

        Boolean archiveStatus = (Boolean) attributes.get("archiveStatus");

        if (archiveStatus != null) {
            setArchiveStatus(archiveStatus);
        }
    }

    @Override
    public long getPositionId() {
        return _positionId;
    }

    @Override
    public void setPositionId(long positionId) {
        _positionId = positionId;
    }

    @Override
    public String getPositionName() {
        if (_positionName == null) {
            return StringPool.BLANK;
        } else {
            return _positionName;
        }
    }

    @Override
    public void setPositionName(String positionName) {
        _columnBitmask = -1L;

        _positionName = positionName;
    }

    @Override
    public boolean getArchiveStatus() {
        return _archiveStatus;
    }

    @Override
    public boolean isArchiveStatus() {
        return _archiveStatus;
    }

    @Override
    public void setArchiveStatus(boolean archiveStatus) {
        _columnBitmask |= ARCHIVESTATUS_COLUMN_BITMASK;

        if (!_setOriginalArchiveStatus) {
            _setOriginalArchiveStatus = true;

            _originalArchiveStatus = _archiveStatus;
        }

        _archiveStatus = archiveStatus;
    }

    public boolean getOriginalArchiveStatus() {
        return _originalArchiveStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Position.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Position toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Position) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PositionImpl positionImpl = new PositionImpl();

        positionImpl.setPositionId(getPositionId());
        positionImpl.setPositionName(getPositionName());
        positionImpl.setArchiveStatus(getArchiveStatus());

        positionImpl.resetOriginalValues();

        return positionImpl;
    }

    @Override
    public int compareTo(Position position) {
        int value = 0;

        value = getPositionName().compareTo(position.getPositionName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Position)) {
            return false;
        }

        Position position = (Position) obj;

        long primaryKey = position.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PositionModelImpl positionModelImpl = this;

        positionModelImpl._originalArchiveStatus = positionModelImpl._archiveStatus;

        positionModelImpl._setOriginalArchiveStatus = false;

        positionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Position> toCacheModel() {
        PositionCacheModel positionCacheModel = new PositionCacheModel();

        positionCacheModel.positionId = getPositionId();

        positionCacheModel.positionName = getPositionName();

        String positionName = positionCacheModel.positionName;

        if ((positionName != null) && (positionName.length() == 0)) {
            positionCacheModel.positionName = null;
        }

        positionCacheModel.archiveStatus = getArchiveStatus();

        return positionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{positionId=");
        sb.append(getPositionId());
        sb.append(", positionName=");
        sb.append(getPositionName());
        sb.append(", archiveStatus=");
        sb.append(getArchiveStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("ru.kotikov.registry.model.Position");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>positionId</column-name><column-value><![CDATA[");
        sb.append(getPositionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>positionName</column-name><column-value><![CDATA[");
        sb.append(getPositionName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archiveStatus</column-name><column-value><![CDATA[");
        sb.append(getArchiveStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}

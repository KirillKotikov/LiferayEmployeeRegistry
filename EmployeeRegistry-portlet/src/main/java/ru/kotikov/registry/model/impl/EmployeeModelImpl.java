package ru.kotikov.registry.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.kotikov.registry.model.Employee;
import ru.kotikov.registry.model.EmployeeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;registry_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.kotikov.registry.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeImpl
 * @see ru.kotikov.registry.model.Employee
 * @see ru.kotikov.registry.model.EmployeeModel
 * @generated
 */
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link ru.kotikov.registry.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "registry_Employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "employeeId", Types.BIGINT },
            { "lastName", Types.VARCHAR },
            { "firstName", Types.VARCHAR },
            { "patronymic", Types.VARCHAR },
            { "sex", Types.VARCHAR },
            { "dateOfBirth", Types.VARCHAR },
            { "positionId", Types.BIGINT },
            { "dateOfEmployment", Types.VARCHAR },
            { "salary", Types.INTEGER },
            { "workPhoneNumber", Types.VARCHAR },
            { "mobilePhoneNumber", Types.VARCHAR },
            { "bankId", Types.BIGINT },
            { "archiveStatus", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table registry_Employee (employeeId LONG not null primary key,lastName VARCHAR(75) null,firstName VARCHAR(75) null,patronymic VARCHAR(75) null,sex VARCHAR(75) null,dateOfBirth VARCHAR(75) null,positionId LONG,dateOfEmployment VARCHAR(75) null,salary INTEGER,workPhoneNumber VARCHAR(75) null,mobilePhoneNumber VARCHAR(75) null,bankId LONG,archiveStatus BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table registry_Employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.lastName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY registry_Employee.lastName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.kotikov.registry.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.kotikov.registry.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.kotikov.registry.model.Employee"),
            true);
    public static long ARCHIVESTATUS_COLUMN_BITMASK = 1L;
    public static long BANKID_COLUMN_BITMASK = 2L;
    public static long POSITIONID_COLUMN_BITMASK = 4L;
    public static long LASTNAME_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.kotikov.registry.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private long _employeeId;
    private String _lastName;
    private String _firstName;
    private String _patronymic;
    private String _sex;
    private String _dateOfBirth;
    private long _positionId;
    private long _originalPositionId;
    private boolean _setOriginalPositionId;
    private String _dateOfEmployment;
    private int _salary;
    private String _workPhoneNumber;
    private String _mobilePhoneNumber;
    private long _bankId;
    private long _originalBankId;
    private boolean _setOriginalBankId;
    private boolean _archiveStatus;
    private boolean _originalArchiveStatus;
    private boolean _setOriginalArchiveStatus;
    private long _columnBitmask;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmployeeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _employeeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Employee.class;
    }

    @Override
    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("employeeId", getEmployeeId());
        attributes.put("lastName", getLastName());
        attributes.put("firstName", getFirstName());
        attributes.put("patronymic", getPatronymic());
        attributes.put("sex", getSex());
        attributes.put("dateOfBirth", getDateOfBirth());
        attributes.put("positionId", getPositionId());
        attributes.put("dateOfEmployment", getDateOfEmployment());
        attributes.put("salary", getSalary());
        attributes.put("workPhoneNumber", getWorkPhoneNumber());
        attributes.put("mobilePhoneNumber", getMobilePhoneNumber());
        attributes.put("bankId", getBankId());
        attributes.put("archiveStatus", getArchiveStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long employeeId = (Long) attributes.get("employeeId");

        if (employeeId != null) {
            setEmployeeId(employeeId);
        }

        String lastName = (String) attributes.get("lastName");

        if (lastName != null) {
            setLastName(lastName);
        }

        String firstName = (String) attributes.get("firstName");

        if (firstName != null) {
            setFirstName(firstName);
        }

        String patronymic = (String) attributes.get("patronymic");

        if (patronymic != null) {
            setPatronymic(patronymic);
        }

        String sex = (String) attributes.get("sex");

        if (sex != null) {
            setSex(sex);
        }

        String dateOfBirth = (String) attributes.get("dateOfBirth");

        if (dateOfBirth != null) {
            setDateOfBirth(dateOfBirth);
        }

        Long positionId = (Long) attributes.get("positionId");

        if (positionId != null) {
            setPositionId(positionId);
        }

        String dateOfEmployment = (String) attributes.get("dateOfEmployment");

        if (dateOfEmployment != null) {
            setDateOfEmployment(dateOfEmployment);
        }

        Integer salary = (Integer) attributes.get("salary");

        if (salary != null) {
            setSalary(salary);
        }

        String workPhoneNumber = (String) attributes.get("workPhoneNumber");

        if (workPhoneNumber != null) {
            setWorkPhoneNumber(workPhoneNumber);
        }

        String mobilePhoneNumber = (String) attributes.get("mobilePhoneNumber");

        if (mobilePhoneNumber != null) {
            setMobilePhoneNumber(mobilePhoneNumber);
        }

        Long bankId = (Long) attributes.get("bankId");

        if (bankId != null) {
            setBankId(bankId);
        }

        Boolean archiveStatus = (Boolean) attributes.get("archiveStatus");

        if (archiveStatus != null) {
            setArchiveStatus(archiveStatus);
        }
    }

    @Override
    public long getEmployeeId() {
        return _employeeId;
    }

    @Override
    public void setEmployeeId(long employeeId) {
        _employeeId = employeeId;
    }

    @Override
    public String getLastName() {
        if (_lastName == null) {
            return StringPool.BLANK;
        } else {
            return _lastName;
        }
    }

    @Override
    public void setLastName(String lastName) {
        _columnBitmask = -1L;

        _lastName = lastName;
    }

    @Override
    public String getFirstName() {
        if (_firstName == null) {
            return StringPool.BLANK;
        } else {
            return _firstName;
        }
    }

    @Override
    public void setFirstName(String firstName) {
        _firstName = firstName;
    }

    @Override
    public String getPatronymic() {
        if (_patronymic == null) {
            return StringPool.BLANK;
        } else {
            return _patronymic;
        }
    }

    @Override
    public void setPatronymic(String patronymic) {
        _patronymic = patronymic;
    }

    @Override
    public String getSex() {
        if (_sex == null) {
            return StringPool.BLANK;
        } else {
            return _sex;
        }
    }

    @Override
    public void setSex(String sex) {
        _sex = sex;
    }

    @Override
    public String getDateOfBirth() {
        if (_dateOfBirth == null) {
            return StringPool.BLANK;
        } else {
            return _dateOfBirth;
        }
    }

    @Override
    public void setDateOfBirth(String dateOfBirth) {
        _dateOfBirth = dateOfBirth;
    }

    @Override
    public long getPositionId() {
        return _positionId;
    }

    @Override
    public void setPositionId(long positionId) {
        _columnBitmask |= POSITIONID_COLUMN_BITMASK;

        if (!_setOriginalPositionId) {
            _setOriginalPositionId = true;

            _originalPositionId = _positionId;
        }

        _positionId = positionId;
    }

    public long getOriginalPositionId() {
        return _originalPositionId;
    }

    @Override
    public String getDateOfEmployment() {
        if (_dateOfEmployment == null) {
            return StringPool.BLANK;
        } else {
            return _dateOfEmployment;
        }
    }

    @Override
    public void setDateOfEmployment(String dateOfEmployment) {
        _dateOfEmployment = dateOfEmployment;
    }

    @Override
    public int getSalary() {
        return _salary;
    }

    @Override
    public void setSalary(int salary) {
        _salary = salary;
    }

    @Override
    public String getWorkPhoneNumber() {
        if (_workPhoneNumber == null) {
            return StringPool.BLANK;
        } else {
            return _workPhoneNumber;
        }
    }

    @Override
    public void setWorkPhoneNumber(String workPhoneNumber) {
        _workPhoneNumber = workPhoneNumber;
    }

    @Override
    public String getMobilePhoneNumber() {
        if (_mobilePhoneNumber == null) {
            return StringPool.BLANK;
        } else {
            return _mobilePhoneNumber;
        }
    }

    @Override
    public void setMobilePhoneNumber(String mobilePhoneNumber) {
        _mobilePhoneNumber = mobilePhoneNumber;
    }

    @Override
    public long getBankId() {
        return _bankId;
    }

    @Override
    public void setBankId(long bankId) {
        _columnBitmask |= BANKID_COLUMN_BITMASK;

        if (!_setOriginalBankId) {
            _setOriginalBankId = true;

            _originalBankId = _bankId;
        }

        _bankId = bankId;
    }

    public long getOriginalBankId() {
        return _originalBankId;
    }

    @Override
    public boolean getArchiveStatus() {
        return _archiveStatus;
    }

    @Override
    public boolean isArchiveStatus() {
        return _archiveStatus;
    }

    @Override
    public void setArchiveStatus(boolean archiveStatus) {
        _columnBitmask |= ARCHIVESTATUS_COLUMN_BITMASK;

        if (!_setOriginalArchiveStatus) {
            _setOriginalArchiveStatus = true;

            _originalArchiveStatus = _archiveStatus;
        }

        _archiveStatus = archiveStatus;
    }

    public boolean getOriginalArchiveStatus() {
        return _originalArchiveStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setEmployeeId(getEmployeeId());
        employeeImpl.setLastName(getLastName());
        employeeImpl.setFirstName(getFirstName());
        employeeImpl.setPatronymic(getPatronymic());
        employeeImpl.setSex(getSex());
        employeeImpl.setDateOfBirth(getDateOfBirth());
        employeeImpl.setPositionId(getPositionId());
        employeeImpl.setDateOfEmployment(getDateOfEmployment());
        employeeImpl.setSalary(getSalary());
        employeeImpl.setWorkPhoneNumber(getWorkPhoneNumber());
        employeeImpl.setMobilePhoneNumber(getMobilePhoneNumber());
        employeeImpl.setBankId(getBankId());
        employeeImpl.setArchiveStatus(getArchiveStatus());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    @Override
    public int compareTo(Employee employee) {
        int value = 0;

        value = getLastName().compareTo(employee.getLastName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmployeeModelImpl employeeModelImpl = this;

        employeeModelImpl._originalPositionId = employeeModelImpl._positionId;

        employeeModelImpl._setOriginalPositionId = false;

        employeeModelImpl._originalBankId = employeeModelImpl._bankId;

        employeeModelImpl._setOriginalBankId = false;

        employeeModelImpl._originalArchiveStatus = employeeModelImpl._archiveStatus;

        employeeModelImpl._setOriginalArchiveStatus = false;

        employeeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.employeeId = getEmployeeId();

        employeeCacheModel.lastName = getLastName();

        String lastName = employeeCacheModel.lastName;

        if ((lastName != null) && (lastName.length() == 0)) {
            employeeCacheModel.lastName = null;
        }

        employeeCacheModel.firstName = getFirstName();

        String firstName = employeeCacheModel.firstName;

        if ((firstName != null) && (firstName.length() == 0)) {
            employeeCacheModel.firstName = null;
        }

        employeeCacheModel.patronymic = getPatronymic();

        String patronymic = employeeCacheModel.patronymic;

        if ((patronymic != null) && (patronymic.length() == 0)) {
            employeeCacheModel.patronymic = null;
        }

        employeeCacheModel.sex = getSex();

        String sex = employeeCacheModel.sex;

        if ((sex != null) && (sex.length() == 0)) {
            employeeCacheModel.sex = null;
        }

        employeeCacheModel.dateOfBirth = getDateOfBirth();

        String dateOfBirth = employeeCacheModel.dateOfBirth;

        if ((dateOfBirth != null) && (dateOfBirth.length() == 0)) {
            employeeCacheModel.dateOfBirth = null;
        }

        employeeCacheModel.positionId = getPositionId();

        employeeCacheModel.dateOfEmployment = getDateOfEmployment();

        String dateOfEmployment = employeeCacheModel.dateOfEmployment;

        if ((dateOfEmployment != null) && (dateOfEmployment.length() == 0)) {
            employeeCacheModel.dateOfEmployment = null;
        }

        employeeCacheModel.salary = getSalary();

        employeeCacheModel.workPhoneNumber = getWorkPhoneNumber();

        String workPhoneNumber = employeeCacheModel.workPhoneNumber;

        if ((workPhoneNumber != null) && (workPhoneNumber.length() == 0)) {
            employeeCacheModel.workPhoneNumber = null;
        }

        employeeCacheModel.mobilePhoneNumber = getMobilePhoneNumber();

        String mobilePhoneNumber = employeeCacheModel.mobilePhoneNumber;

        if ((mobilePhoneNumber != null) && (mobilePhoneNumber.length() == 0)) {
            employeeCacheModel.mobilePhoneNumber = null;
        }

        employeeCacheModel.bankId = getBankId();

        employeeCacheModel.archiveStatus = getArchiveStatus();

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{employeeId=");
        sb.append(getEmployeeId());
        sb.append(", lastName=");
        sb.append(getLastName());
        sb.append(", firstName=");
        sb.append(getFirstName());
        sb.append(", patronymic=");
        sb.append(getPatronymic());
        sb.append(", sex=");
        sb.append(getSex());
        sb.append(", dateOfBirth=");
        sb.append(getDateOfBirth());
        sb.append(", positionId=");
        sb.append(getPositionId());
        sb.append(", dateOfEmployment=");
        sb.append(getDateOfEmployment());
        sb.append(", salary=");
        sb.append(getSalary());
        sb.append(", workPhoneNumber=");
        sb.append(getWorkPhoneNumber());
        sb.append(", mobilePhoneNumber=");
        sb.append(getMobilePhoneNumber());
        sb.append(", bankId=");
        sb.append(getBankId());
        sb.append(", archiveStatus=");
        sb.append(getArchiveStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("ru.kotikov.registry.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>employeeId</column-name><column-value><![CDATA[");
        sb.append(getEmployeeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastName</column-name><column-value><![CDATA[");
        sb.append(getLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstName</column-name><column-value><![CDATA[");
        sb.append(getFirstName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patronymic</column-name><column-value><![CDATA[");
        sb.append(getPatronymic());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sex</column-name><column-value><![CDATA[");
        sb.append(getSex());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
        sb.append(getDateOfBirth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>positionId</column-name><column-value><![CDATA[");
        sb.append(getPositionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateOfEmployment</column-name><column-value><![CDATA[");
        sb.append(getDateOfEmployment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salary</column-name><column-value><![CDATA[");
        sb.append(getSalary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>workPhoneNumber</column-name><column-value><![CDATA[");
        sb.append(getWorkPhoneNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mobilePhoneNumber</column-name><column-value><![CDATA[");
        sb.append(getMobilePhoneNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bankId</column-name><column-value><![CDATA[");
        sb.append(getBankId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archiveStatus</column-name><column-value><![CDATA[");
        sb.append(getArchiveStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}

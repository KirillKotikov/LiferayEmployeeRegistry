package ru.kotikov.registry.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.kotikov.registry.model.Employee;
import ru.kotikov.registry.model.EmployeeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;registry_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.kotikov.registry.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeImpl
 * @see ru.kotikov.registry.model.Employee
 * @see ru.kotikov.registry.model.EmployeeModel
 * @generated
 */
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link ru.kotikov.registry.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "registry_Employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "employee_id", Types.BIGINT },
            { "last_name", Types.VARCHAR },
            { "first_name", Types.VARCHAR },
            { "patronymic", Types.VARCHAR },
            { "sex", Types.VARCHAR },
            { "date_of_birth", Types.VARCHAR },
            { "position_id", Types.BIGINT },
            { "date_of_employment", Types.VARCHAR },
            { "salary", Types.INTEGER },
            { "work_phone_number", Types.VARCHAR },
            { "mobile_phone_number", Types.VARCHAR },
            { "bank_id", Types.BIGINT },
            { "archive_status", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table registry_Employee (employee_id LONG not null primary key,last_name VARCHAR(75) null,first_name VARCHAR(75) null,patronymic VARCHAR(75) null,sex VARCHAR(75) null,date_of_birth VARCHAR(75) null,position_id LONG,date_of_employment VARCHAR(75) null,salary INTEGER,work_phone_number VARCHAR(75) null,mobile_phone_number VARCHAR(75) null,bank_id LONG,archive_status BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table registry_Employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.last_name ASC";
    public static final String ORDER_BY_SQL = " ORDER BY registry_Employee.last_name ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.kotikov.registry.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.kotikov.registry.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.kotikov.registry.model.Employee"),
            true);
    public static long ARCHIVE_STATUS_COLUMN_BITMASK = 1L;
    public static long BANK_ID_COLUMN_BITMASK = 2L;
    public static long POSITION_ID_COLUMN_BITMASK = 4L;
    public static long LAST_NAME_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.kotikov.registry.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private long _employee_id;
    private String _last_name;
    private String _first_name;
    private String _patronymic;
    private String _sex;
    private String _date_of_birth;
    private long _position_id;
    private long _originalPosition_id;
    private boolean _setOriginalPosition_id;
    private String _date_of_employment;
    private int _salary;
    private String _work_phone_number;
    private String _mobile_phone_number;
    private long _bank_id;
    private long _originalBank_id;
    private boolean _setOriginalBank_id;
    private boolean _archive_status;
    private boolean _originalArchive_status;
    private boolean _setOriginalArchive_status;
    private long _columnBitmask;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _employee_id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmployee_id(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _employee_id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Employee.class;
    }

    @Override
    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("employee_id", getEmployee_id());
        attributes.put("last_name", getLast_name());
        attributes.put("first_name", getFirst_name());
        attributes.put("patronymic", getPatronymic());
        attributes.put("sex", getSex());
        attributes.put("date_of_birth", getDate_of_birth());
        attributes.put("position_id", getPosition_id());
        attributes.put("date_of_employment", getDate_of_employment());
        attributes.put("salary", getSalary());
        attributes.put("work_phone_number", getWork_phone_number());
        attributes.put("mobile_phone_number", getMobile_phone_number());
        attributes.put("bank_id", getBank_id());
        attributes.put("archive_status", getArchive_status());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long employee_id = (Long) attributes.get("employee_id");

        if (employee_id != null) {
            setEmployee_id(employee_id);
        }

        String last_name = (String) attributes.get("last_name");

        if (last_name != null) {
            setLast_name(last_name);
        }

        String first_name = (String) attributes.get("first_name");

        if (first_name != null) {
            setFirst_name(first_name);
        }

        String patronymic = (String) attributes.get("patronymic");

        if (patronymic != null) {
            setPatronymic(patronymic);
        }

        String sex = (String) attributes.get("sex");

        if (sex != null) {
            setSex(sex);
        }

        String date_of_birth = (String) attributes.get("date_of_birth");

        if (date_of_birth != null) {
            setDate_of_birth(date_of_birth);
        }

        Long position_id = (Long) attributes.get("position_id");

        if (position_id != null) {
            setPosition_id(position_id);
        }

        String date_of_employment = (String) attributes.get(
                "date_of_employment");

        if (date_of_employment != null) {
            setDate_of_employment(date_of_employment);
        }

        Integer salary = (Integer) attributes.get("salary");

        if (salary != null) {
            setSalary(salary);
        }

        String work_phone_number = (String) attributes.get("work_phone_number");

        if (work_phone_number != null) {
            setWork_phone_number(work_phone_number);
        }

        String mobile_phone_number = (String) attributes.get(
                "mobile_phone_number");

        if (mobile_phone_number != null) {
            setMobile_phone_number(mobile_phone_number);
        }

        Long bank_id = (Long) attributes.get("bank_id");

        if (bank_id != null) {
            setBank_id(bank_id);
        }

        Boolean archive_status = (Boolean) attributes.get("archive_status");

        if (archive_status != null) {
            setArchive_status(archive_status);
        }
    }

    @Override
    public long getEmployee_id() {
        return _employee_id;
    }

    @Override
    public void setEmployee_id(long employee_id) {
        _employee_id = employee_id;
    }

    @Override
    public String getLast_name() {
        if (_last_name == null) {
            return StringPool.BLANK;
        } else {
            return _last_name;
        }
    }

    @Override
    public void setLast_name(String last_name) {
        _columnBitmask = -1L;

        _last_name = last_name;
    }

    @Override
    public String getFirst_name() {
        if (_first_name == null) {
            return StringPool.BLANK;
        } else {
            return _first_name;
        }
    }

    @Override
    public void setFirst_name(String first_name) {
        _first_name = first_name;
    }

    @Override
    public String getPatronymic() {
        if (_patronymic == null) {
            return StringPool.BLANK;
        } else {
            return _patronymic;
        }
    }

    @Override
    public void setPatronymic(String patronymic) {
        _patronymic = patronymic;
    }

    @Override
    public String getSex() {
        if (_sex == null) {
            return StringPool.BLANK;
        } else {
            return _sex;
        }
    }

    @Override
    public void setSex(String sex) {
        _sex = sex;
    }

    @Override
    public String getDate_of_birth() {
        if (_date_of_birth == null) {
            return StringPool.BLANK;
        } else {
            return _date_of_birth;
        }
    }

    @Override
    public void setDate_of_birth(String date_of_birth) {
        _date_of_birth = date_of_birth;
    }

    @Override
    public long getPosition_id() {
        return _position_id;
    }

    @Override
    public void setPosition_id(long position_id) {
        _columnBitmask |= POSITION_ID_COLUMN_BITMASK;

        if (!_setOriginalPosition_id) {
            _setOriginalPosition_id = true;

            _originalPosition_id = _position_id;
        }

        _position_id = position_id;
    }

    public long getOriginalPosition_id() {
        return _originalPosition_id;
    }

    @Override
    public String getDate_of_employment() {
        if (_date_of_employment == null) {
            return StringPool.BLANK;
        } else {
            return _date_of_employment;
        }
    }

    @Override
    public void setDate_of_employment(String date_of_employment) {
        _date_of_employment = date_of_employment;
    }

    @Override
    public int getSalary() {
        return _salary;
    }

    @Override
    public void setSalary(int salary) {
        _salary = salary;
    }

    @Override
    public String getWork_phone_number() {
        if (_work_phone_number == null) {
            return StringPool.BLANK;
        } else {
            return _work_phone_number;
        }
    }

    @Override
    public void setWork_phone_number(String work_phone_number) {
        _work_phone_number = work_phone_number;
    }

    @Override
    public String getMobile_phone_number() {
        if (_mobile_phone_number == null) {
            return StringPool.BLANK;
        } else {
            return _mobile_phone_number;
        }
    }

    @Override
    public void setMobile_phone_number(String mobile_phone_number) {
        _mobile_phone_number = mobile_phone_number;
    }

    @Override
    public long getBank_id() {
        return _bank_id;
    }

    @Override
    public void setBank_id(long bank_id) {
        _columnBitmask |= BANK_ID_COLUMN_BITMASK;

        if (!_setOriginalBank_id) {
            _setOriginalBank_id = true;

            _originalBank_id = _bank_id;
        }

        _bank_id = bank_id;
    }

    public long getOriginalBank_id() {
        return _originalBank_id;
    }

    @Override
    public boolean getArchive_status() {
        return _archive_status;
    }

    @Override
    public boolean isArchive_status() {
        return _archive_status;
    }

    @Override
    public void setArchive_status(boolean archive_status) {
        _columnBitmask |= ARCHIVE_STATUS_COLUMN_BITMASK;

        if (!_setOriginalArchive_status) {
            _setOriginalArchive_status = true;

            _originalArchive_status = _archive_status;
        }

        _archive_status = archive_status;
    }

    public boolean getOriginalArchive_status() {
        return _originalArchive_status;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setEmployee_id(getEmployee_id());
        employeeImpl.setLast_name(getLast_name());
        employeeImpl.setFirst_name(getFirst_name());
        employeeImpl.setPatronymic(getPatronymic());
        employeeImpl.setSex(getSex());
        employeeImpl.setDate_of_birth(getDate_of_birth());
        employeeImpl.setPosition_id(getPosition_id());
        employeeImpl.setDate_of_employment(getDate_of_employment());
        employeeImpl.setSalary(getSalary());
        employeeImpl.setWork_phone_number(getWork_phone_number());
        employeeImpl.setMobile_phone_number(getMobile_phone_number());
        employeeImpl.setBank_id(getBank_id());
        employeeImpl.setArchive_status(getArchive_status());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    @Override
    public int compareTo(Employee employee) {
        int value = 0;

        value = getLast_name().compareTo(employee.getLast_name());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmployeeModelImpl employeeModelImpl = this;

        employeeModelImpl._originalPosition_id = employeeModelImpl._position_id;

        employeeModelImpl._setOriginalPosition_id = false;

        employeeModelImpl._originalBank_id = employeeModelImpl._bank_id;

        employeeModelImpl._setOriginalBank_id = false;

        employeeModelImpl._originalArchive_status = employeeModelImpl._archive_status;

        employeeModelImpl._setOriginalArchive_status = false;

        employeeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.employee_id = getEmployee_id();

        employeeCacheModel.last_name = getLast_name();

        String last_name = employeeCacheModel.last_name;

        if ((last_name != null) && (last_name.length() == 0)) {
            employeeCacheModel.last_name = null;
        }

        employeeCacheModel.first_name = getFirst_name();

        String first_name = employeeCacheModel.first_name;

        if ((first_name != null) && (first_name.length() == 0)) {
            employeeCacheModel.first_name = null;
        }

        employeeCacheModel.patronymic = getPatronymic();

        String patronymic = employeeCacheModel.patronymic;

        if ((patronymic != null) && (patronymic.length() == 0)) {
            employeeCacheModel.patronymic = null;
        }

        employeeCacheModel.sex = getSex();

        String sex = employeeCacheModel.sex;

        if ((sex != null) && (sex.length() == 0)) {
            employeeCacheModel.sex = null;
        }

        employeeCacheModel.date_of_birth = getDate_of_birth();

        String date_of_birth = employeeCacheModel.date_of_birth;

        if ((date_of_birth != null) && (date_of_birth.length() == 0)) {
            employeeCacheModel.date_of_birth = null;
        }

        employeeCacheModel.position_id = getPosition_id();

        employeeCacheModel.date_of_employment = getDate_of_employment();

        String date_of_employment = employeeCacheModel.date_of_employment;

        if ((date_of_employment != null) && (date_of_employment.length() == 0)) {
            employeeCacheModel.date_of_employment = null;
        }

        employeeCacheModel.salary = getSalary();

        employeeCacheModel.work_phone_number = getWork_phone_number();

        String work_phone_number = employeeCacheModel.work_phone_number;

        if ((work_phone_number != null) && (work_phone_number.length() == 0)) {
            employeeCacheModel.work_phone_number = null;
        }

        employeeCacheModel.mobile_phone_number = getMobile_phone_number();

        String mobile_phone_number = employeeCacheModel.mobile_phone_number;

        if ((mobile_phone_number != null) &&
                (mobile_phone_number.length() == 0)) {
            employeeCacheModel.mobile_phone_number = null;
        }

        employeeCacheModel.bank_id = getBank_id();

        employeeCacheModel.archive_status = getArchive_status();

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{employee_id=");
        sb.append(getEmployee_id());
        sb.append(", last_name=");
        sb.append(getLast_name());
        sb.append(", first_name=");
        sb.append(getFirst_name());
        sb.append(", patronymic=");
        sb.append(getPatronymic());
        sb.append(", sex=");
        sb.append(getSex());
        sb.append(", date_of_birth=");
        sb.append(getDate_of_birth());
        sb.append(", position_id=");
        sb.append(getPosition_id());
        sb.append(", date_of_employment=");
        sb.append(getDate_of_employment());
        sb.append(", salary=");
        sb.append(getSalary());
        sb.append(", work_phone_number=");
        sb.append(getWork_phone_number());
        sb.append(", mobile_phone_number=");
        sb.append(getMobile_phone_number());
        sb.append(", bank_id=");
        sb.append(getBank_id());
        sb.append(", archive_status=");
        sb.append(getArchive_status());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("ru.kotikov.registry.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>employee_id</column-name><column-value><![CDATA[");
        sb.append(getEmployee_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>last_name</column-name><column-value><![CDATA[");
        sb.append(getLast_name());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>first_name</column-name><column-value><![CDATA[");
        sb.append(getFirst_name());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patronymic</column-name><column-value><![CDATA[");
        sb.append(getPatronymic());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sex</column-name><column-value><![CDATA[");
        sb.append(getSex());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>date_of_birth</column-name><column-value><![CDATA[");
        sb.append(getDate_of_birth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>position_id</column-name><column-value><![CDATA[");
        sb.append(getPosition_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>date_of_employment</column-name><column-value><![CDATA[");
        sb.append(getDate_of_employment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salary</column-name><column-value><![CDATA[");
        sb.append(getSalary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>work_phone_number</column-name><column-value><![CDATA[");
        sb.append(getWork_phone_number());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mobile_phone_number</column-name><column-value><![CDATA[");
        sb.append(getMobile_phone_number());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bank_id</column-name><column-value><![CDATA[");
        sb.append(getBank_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archive_status</column-name><column-value><![CDATA[");
        sb.append(getArchive_status());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
